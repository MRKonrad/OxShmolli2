#------------------------------------#
#   OxShmolli2   #
#------------------------------------#

# TODO: it would be nice to 'addons: apt: sources:' conditional. Unfortunately if (like the one below) does not work:
#       if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$CXX" == "g++" ]; then

sudo: false
language: cpp

os:
  - linux
  - osx

compiler:
  - gcc
  # - clang

branches:
  # Blacklist the documentation branch
  except:
    - gh-pages

# Environment variables
env:
  global:
    # used in documentation script
    - GH_REPO_NAME: OxShmolli2
    - DOXYFILE: $TRAVIS_BUILD_DIR/Doxyfile
    - INPUT_FOR_DOXY: "'. ./app ./lib ./tests'"
    - OUTPUT_FOR_DOXY: "${TRAVIS_BUILD_DIR}/code_docs/${GH_REPO_NAME}"
    - GH_REPO_REF: github.com/MRKonrad/OxShmolli2.git

addons:
  apt:
    sources:
      ubuntu-toolchain-r-test;
    packages:
      - doxygen
      - doxygen-doc
      - doxygen-latex
      - doxygen-gui
      - graphviz

before_install:
  - cd ${TRAVIS_BUILD_DIR}

  # install coveralls only in linux g++
  - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$CXX" == "g++" ]; then
      pip install --user cpp-coveralls;
    fi

script:
  # configure and generate
  - cmake .

  # add coverage option for coveralls (only in linux g++)
  - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$CXX" == "g++" ]; then
      cmake -DCOVERAGE=1 . ;
    fi

  # this is make
  - make -j8
  - make install

  # tests. Also needed to get the coverage
  - cd install/tests
  - ./OxShmolli2Tests
  - cd $TRAVIS_BUILD_DIR

after_success:
  # Run coverage analysis only in linux g++
  - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$CXX" == "g++" ]; then
      coveralls --root . --exclude thirdParty -E ".*CMakeFiles.*" ;
    fi
  # Generate and deploy documentation only in linux g++
  - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$CXX" == "g++" ]; then
      chmod +x generateDocumentationAndDeploy.sh;
      ./generateDocumentationAndDeploy.sh;
    fi

before_deploy:
  - echo "Ready to deploy?"

  - export exe_extended_name=OxShmolli2Exe_${TRAVIS_BRANCH}_${TRAVIS_OS_NAME} # just a variable
  # Problem: when deploying an executable as it is, somewhere in the process its permission to execute (-x) is lost.
  # Solution: zip it and deploy the archive
  - mkdir deployment
  - cp OxShmolli2Exe ${exe_extended_name}
  - cd deployment
  - zip -r ${exe_extended_name}.zip ../${exe_extended_name}
  - cd ..

deploy:
  provider: releases # GitHub
  api_key:
    secure: dsF+GJ8xY6GAHSk05YODgI8aWpnhZzsqbtWQjjfg0Iix8uWHoOtKfu+MC4NrbhJKSE4z7bjrnC32BzMl9/PHPjjh+pkCa2TUnsKG23jq3MxAffvCwfqaCWA6qQQsJ6WIjpoavpldr5bTXXDP8NXVgUOufUkC0ka+mzStqg2ah30ocMhaYUf1gWE9G32H6CSLg32dA8+1++W8tc+aI2+QlwUSWyPUwwkh6Zv1y7Gkpx7/7d7R5RlFv0FHWKZHED7MX28WyaxCJTp2d93wWS+6lxpQ5IXKSn7/WovUs20rPqDGf50FFCSwWhZizCQWeG2d0SYrfIBTJ+it7tCL78oJ5bRtC0Fc8iAwEibFHRac1nMVXFtJ+R2kd1qoXKoR4AG9CI8CfZDA/i/Xpnsi6rkzoSHuC7dlV7bL5IAek62lpDsgrZFilLrgnGneGDvfBP4+qFCpqSADTfPAYX1lyyYVK9HjV8J+BE4ojt1ar5TV3wsO9zd6G4bJTnQZ8D563HNhI8/+GgVGRsoUej8H9Q1X4dyWR2H6dGRtohPm5kXbN3GqrhYqbvD209+pBu8pOOZVcOrtS6L4khn9Er4bhRs5KlAhApDqu4URsa+WAVDIfIC0VneNNe3/Ri71WQywmFEUMmRypfYSW2571WHz7AEES/ecf3r8n1H//HfFPW13kOw=
  file_glob: true # to use wildcards
  file:
    - deployment/*
  skip_cleanup: true
  on:
    tags: true
    condition: ${CXX} == "g++" # I guess I have to pick one compiler
